%% Matlib Lab 7 - Simple Reverbs and Multichannel Audio

%% Code Listing

%%Exercise 1:

x=wavread('Jazz.wav'); % read wave file

xR=myDelay(x, 0.02, 1, 44100); % make delay line 

xR2=myDelay(x, 0.03, 1, 44100); % make delay line

xR3=myDelay(x, 0.04, 1, 44100); % make delay line

xR=xR*0.5; % adjust delay line volume

xR2=xR2*0.4; % adjust delay line volume

xR3=xR3*0.3; % adjust delay line volume

xR2=LP(xR2, 100, 1000, 44100); % apply low pass filter to delay line

xR3=LP(xR2, 100, 800, 44100); % apply low pass filter to delay line

x=[x' zeros(1, (length(xR3)-length(x)))]; % adjust audio vectors’ length

xR=[xR' zeros(1, (length(xR3)-length(xR)))]; % adjust audio vectors’ length

xR2=[xR2' zeros(1, (length(xR3)-length(xR2)))]; % adjust audio vectors’ length

rev=(xR+xR2+xR3); % add delay lines

rev=rev*(1-(max(rev)-1)); % normalize reverb buffer volume

drywet=0.7; % set dry/wet ratio

rev=drywet*rev; % set reverb buffer volume

x=(1-drywet)*x; % set dry signal volume

output=x+rev; % add dry signal and reverb buffer

sound(output, 44100); % play audio


%% Exercise 2:

x=wavread('Jazz.wav'); % read wave file

xR=myDelay(x, 0.02, 1, 44100); % generate delay line

xR2=myDelay(x, 0.03, 1, 44100); % generate delay line

xR3=myDelay(x, 0.07, 1, 44100); % generate delay line

xR=xR*0.5; % adjust delay line volume

xR2=xR2*0.6; % adjust delay line volume

xR3=xR3*0.7; % adjust delay line volume

xR2=LP(xR2, 100, 1000, 44100); % filter delay line

xR3=LP(xR2, 100, 800, 44100); % filter delay line

x=[x' zeros(1, (length(xR3)-length(x)))]; % adjust length

xR=[xR' zeros(1, (length(xR3)-length(xR)))]; % adjust length

xR2=[xR2' zeros(1, (length(xR3)-length(xR2)))]; % adjust length

LRch=(xR + xR2)/2; % assign delay lines to channels

LRBch=xR3; % assign delay lines to channels 

LRBch=LRBch'; % convert all delay lines to columns

sum=[x' LRch' LRch' LRBch' LRBch']; % create multichannel stream

wavwrite(sum, 44100, 16, '5_1rev.wav'); % save multichannel audio
